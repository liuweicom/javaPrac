<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
       					   http://www.springframework.org/schema/beans/spring-beans.xsd
       					   http://www.springframework.org/schema/aop 
       					   http://www.springframework.org/schema/aop/spring-aop.xsd">
	<!-- 创建目标类 -->
	<bean id="userServiceId" class="com.weiwei.d_aspectj.UserServiceImpl"></bean>
	<!-- 创建切面类 -->
	<bean id="myAspectId" class="com.weiwei.d_aspectj.MyAspect"></bean>
	<!-- 
		aop编程
		《aop:aspect》将切面类 声明切面，从而获得通知（方法）
				ref：切面类引用
		《aop:pointcut》声明一个切入点，所有的通知都可以使用
			expression：切入点表达式
			ID：名称用于其他通知引用
	 -->
		<aop:config>
			<aop:aspect ref="myAspectId">
				<aop:pointcut expression="execution(* com.weiwei.d_aspectj.UserServiceImpl.*(..))" id="myPintCut"/>
				<!-- 前置通知：
					<aop:bofore method="" pointcut="" pointcut-ref="".
						method:通知方法及方法名
						pointcut：切入点表达式，此表达式只能当前通知使用
						pointcut-ref：切入点引用，可以与其他通知共享切入点
						
						<aop:before method="myBefore" pointcut-ref="myPintCut"/>
				 -->
				<!--
				后置通知：目标方法执行后，获得返回值
				《aop：after-returning method="" pointcut-ref="" returning=""》
					returning: 通知方法的第二个参数的格式
					通知方法格式：public void myAfterReturning(JoinPoint joinPoint,Object ret)
					参数1：连接点描述
					参数2：类型Object，参数名 returning="ret" 配置的
					例如
				<aop:after-returning method="myAfterRuturning" returning="ret" pointcut-ref="myPintCut"/>
				 -->
				 
				 
				 <!-- 
				 	环绕通知：
				 	《aop：around method=“” pointcut-ref=""》
				 	通知方法格式：public Object MyAround（ProceedingJoinPoint joinPoint）
				 		返回值类型：Object
				 		方法名：任意
				 		参数org.aspectj.lang.ProceedingJoinPoint
				 		抛出异常：
				 	执行目标方法 Object obj=joinPoint.proceed();
				 	
				 	 <aop:around method="myAround" pointcut-ref="myPintCut"/>
				  -->
				
				<!-- 
				抛出异常：
				<aop:after-throwing pointcut-ref="myPintCut" throwing="" mthod=""/>
				throwing:通知方法的第二个参数名名称
				通知方法格式：public void myAfterThrowing(JoinPoint joinPoint,Throwable e){
					参数1：连接点描述对象
					参数2：获得异常信息，类型Throwable ，参数名由throwing="e" 配置
					<aop:after-throwing method="myAfterThrowing" pointcut-ref="myPintCut" throwing="e"/>
				 -->
				 
				 <aop:after method="myAfter" pointcut-ref="myPintCut"/>
			</aop:aspect>
		</aop:config>
</beans>